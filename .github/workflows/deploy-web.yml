name: Deploy Web Application

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

concurrency:
  group: deploy-web-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Determine deployment environment and settings
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy_url: ${{ steps.env.outputs.deploy_url }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi
          
          # Set deployment URL based on environment
          if [[ "$environment" == "production" ]]; then
            echo "deploy_url=https://starter-template.vercel.app" >> $GITHUB_OUTPUT
          elif [[ "$environment" == "staging" ]]; then
            echo "deploy_url=https://starter-template-staging.vercel.app" >> $GITHUB_OUTPUT
          else
            echo "deploy_url=https://starter-template-${{ github.event.number || github.sha }}.vercel.app" >> $GITHUB_OUTPUT
          fi

  # Build and test before deployment
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build --filter="!web"

      - name: Build web application
        run: pnpm build --filter=web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_URL: ${{ needs.setup.outputs.deploy_url }}

      - name: Run tests
        run: pnpm test --filter=web
        env:
          NODE_ENV: test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: apps/web/.next
          retention-days: 1

  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ needs.setup.outputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build ${{ needs.setup.outputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy Project Artifacts
        id: deploy
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.url }}';
            const environment = '${{ needs.setup.outputs.environment }}';
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              target_url: deploymentUrl,
              environment: environment,
              description: `Deployed to ${environment}`,
            });

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.url }}';
            const environment = '${{ needs.setup.outputs.environment }}';
            
            const body = `üöÄ **Deployment Preview**
            
            - **Environment**: ${environment}
            - **URL**: ${deploymentUrl}
            - **Commit**: ${context.sha.substring(0, 7)}
            
            ‚úÖ Deployment successful!`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Run post-deployment tests
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy-vercel]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          for i in {1..30}; do
            if curl -f -s "${{ needs.setup.outputs.deploy_url }}/api/health" > /dev/null; then
              echo "Deployment is ready!"
              break
            fi
            echo "Attempt $i: Deployment not ready yet, waiting 10 seconds..."
            sleep 10
          done

      - name: Run health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ needs.setup.outputs.deploy_url }}/api/health")
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          # Test main pages
          curl -f -s "${{ needs.setup.outputs.deploy_url }}/" > /dev/null
          curl -f -s "${{ needs.setup.outputs.deploy_url }}/auth/login" > /dev/null
          curl -f -s "${{ needs.setup.outputs.deploy_url }}/api/docs" > /dev/null
          echo "‚úÖ Smoke tests passed"

      - name: Run E2E tests against deployment
        if: needs.setup.outputs.environment == 'staging'
        run: pnpm test:e2e
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.setup.outputs.deploy_url }}

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [setup, deploy-vercel, post-deployment-tests]
    if: always() && needs.setup.outputs.should_deploy == 'true'

    steps:
      - name: Notify success
        if: needs.deploy-vercel.result == 'success' && needs.post-deployment-tests.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "URL: ${{ needs.setup.outputs.deploy_url }}"

      - name: Notify failure
        if: needs.deploy-vercel.result == 'failure' || needs.post-deployment-tests.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          exit 1

      # Optional: Send Slack notification
      # - name: Send Slack notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#deployments'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     fields: repo,message,commit,author,action,eventName,ref,workflow